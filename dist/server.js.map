{"version":3,"sources":["../server/server.js"],"names":["db","connect","then","connection","app","listen","console","log","catch","error","use","static","json","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","get","req","res","collection","find","toArray","metadata","total_count","issues","length","_metadata","records","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","_id","result","insertedId","limit","next","validIssueStatus","New","Open","Assigned","Fixed","Verified","Closed","issueFieldType","owner","effort","completionDate","title","issue","field","type","id"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport Issue from './issue.js';\nimport 'babel-polyfill';\n\nlet db;\nMongoClient.connect('mongodb://localhost/issuetracker')\n.then(connection => {\n\tdb = connection;\n\tapp.listen(3000, () => {\n\t\tconsole.log('App started on port 3000');\n\t});\n}).catch(error => {\n\tconsole.log('ERROR:', error);\n});\n\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\n\nif (process.env.NODE_ENV !== 'production') {\n  const webpack = require('webpack');\n  const webpackDevMiddleware = require('webpack-dev-middleware');\n  const webpackHotMiddleware = require('webpack-hot-middleware');\n  const config = require('../webpack.config');\n  config.entry.app.push('webpack-hot-middleware/client',\n    'webpack/hot/only-dev-server');\n  config.plugins.push(new webpack.HotModuleReplacementPlugin());\n  const bundler = webpack(config);\n  app.use(webpackDevMiddleware(bundler, { noInfo: true }));\n  app.use(webpackHotMiddleware(bundler, { log: console.log }));\n}\n\n\napp.get('/api/issues', (req, res) => {\n  db.collection('issues').find().toArray().then(issues => {\n    const metadata = { total_count: issues.length };\n    res.json({ _metadata: metadata, records: issues })\n  }).catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n\napp.post('/api/issues', (req, res) => {\n\tconst newIssue = req.body;\n\tnewIssue.created = new Date();\n\n\tif (!newIssue.status) {\n\t\tnewIssue.status = 'New';\n\t}\n\n\tconst err = Issue.validateIssue(newIssue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n\t\treturn; }\n\ndb.collection('issues').insertOne(newIssue)\n.then(result =>\n    db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\n  ).then(newIssue => {\n    res.json(newIssue);\n  }).catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n\t});\n});\n\n\n\n\nconst validIssueStatus = {\n  New: true,\n  Open: true,\n  Assigned: true,\n  Fixed: true,\n  Verified: true,\n  Closed: true,\n};\n\nconst issueFieldType = {\n  status: 'required',\n  owner: 'required',\n  effort: 'optional',\n  created: 'required',\n  completionDate: 'optional',\n  title: 'required',\n};\n\nfunction validateIssue(issue) {\n  for (const field in issueFieldType) {\n    const type = issueFieldType[field];\n    if (!type) {\n      delete issue[field];\n    } else if (type === 'required' && !issue[field]) {\n      return `${field} is required.`;\n\t\t}\n\t}\n\n  if (!validIssueStatus[issue.status])\n    return `${issue.status} is not a valid status.`;\n\n  return null;\n}\n\napp.post('/api/issues', (req, res) => {\n  const newIssue = req.body;\n  newIssue.id = issues.length + 1;\n  newIssue.created = new Date();\n  if (!newIssue.status)\n    newIssue.status = 'New';\n\n  const err = validateIssue(newIssue)\n  if (err) {\n    res.status(422).json({ message: `Invalid requrest: ${err}` });\n    return;\n    }\n\n  issues.push(newIssue);\n  res.json(newIssue);\n});\n"]}